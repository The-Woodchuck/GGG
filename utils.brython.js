__BRYTHON__.use_VFS = true;
var scripts = {"$timestamp": 1640238907973, "Hero": [".py", "\ndef init_army(class_name=\"Knight\"):\n if class_name ==\"Knight\":\n  return [\n  {\"Name\":\"Pikeman\",\"Food\":1,\"Attack\":2,\"Defence\":1,\"Speed\":3,\"HP\":5,\"Ranged\":False ,\n  \"Unlocked\":True ,\"Count\":0,\"Allocated Food\":0,\"Tooltip\":\"It's a man. With a pike. And no training other than which end to point away from him.\"},\n  {\"Name\":\"Archer\",\"Food\":3,\"Attack\":3,\"Defence\":1,\"Speed\":4,\"HP\":10,\"Ranged\":True ,\n  \"Unlocked\":False ,\"Count\":0,\"Allocated Food\":0,\"Tooltip\":\"Foregoing the typical knight armour, the archers choose to engage in combat from a distance.\"},\n  {\"Name\":\"Squire\",\"Food\":5,\"Attack\":3,\"Defence\":4,\"Speed\":6,\"HP\":20,\"Ranged\":False ,\n  \"Unlocked\":False ,\"Count\":0,\"Allocated Food\":0,\"Tooltip\":\"A knight wannabe. You can laugh at them, but one day they will be knights (spoiler: nope they are not)\"},\n  {\"Name\":\"Knight\",\"Food\":10,\"Attack\":8,\"Defence\":10,\"Speed\":8,\"HP\":50,\"Ranged\":False ,\n  \"Unlocked\":False ,\"Count\":0,\"Allocated Food\":0,\"Tooltip\":\"Heavily armoured, the knight\"},\n  {\"Name\":\"Cavalry Knight\",\"Food\":20,\"Attack\":16,\"Defence\":20,\"Speed\":10,\"HP\":100,\"Ranged\":False ,\n  \"Unlocked\":False ,\"Count\":0,\"Allocated Food\":0},\n  {\"Name\":\"Paladin\",\"Food\":100,\"Attack\":60,\"Defence\":120,\"Speed\":14,\"HP\":300,\"Ranged\":False ,\n  \"Unlocked\":False ,\"Count\":0,\"Allocated Food\":0},\n  ]\nclass Hero:\n def __init__(self,class_name=\"Knight\"):\n  self.class_name=class_name\n  self.army=init_army(class_name)\n  self.redraw=False\n  for i in range(len(self.army)):\n   self.army[i][\"Food allocation\"]=1 /len(self.army)\n   self.army[i][\"Growth\"]=\"0/s\"\n   \n def grow_army(self,food,foodps=0):\n  unlockAllocation=sum([i[\"Food allocation\"]for i in self.army if i['Unlocked']])\n  food_allocated=0\n  redraw=False\n  for i in range(len(self.army)):\n   if self.army[i][\"Unlocked\"]:\n    this_allocated_food=int(food *self.army[i][\"Food allocation\"]/unlockAllocation)\n    food_allocated +=this_allocated_food\n    if foodps >0:\n     allocated_foodps=foodps *self.army[i][\"Food allocation\"]/unlockAllocation\n     growthps=allocated_foodps /self.army[i][\"Food\"]\n     \n     \n     \n     if self.army[i][\"Food allocation\"]>0 and foodps >0:\n      if growthps >1:\n       self.army[i][\"Growth\"]=f\"{growthps:.2f}/s\"\n      else :\n       self.army[i][\"Growth\"]=f\"{(1/growthps):.2f}s /{self.army[i]['Name']}\"\n     else :\n      self.army[i][\"Growth\"]=\"0/s\"\n      \n    self.army[i][\"Allocated Food\"]+=food_allocated\n    if self.army[i][\"Allocated Food\"]>=self.army[i][\"Food\"]:\n     self.army[i][\"Count\"]+=int(self.army[i][\"Allocated Food\"]/self.army[i][\"Food\"])\n     self.army[i][\"Allocated Food\"]-=int(self.army[i][\"Allocated Food\"]/self.army[i][\"Food\"])*self.army[i][\"Food\"]\n     redraw=True\n   else :\n    if self.army[i -1][\"Count\"]>=1000:\n     self.army[i][\"Unlocked\"]=True\n     \n  self.redraw=redraw\n  return (food -food_allocated)\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n", []], "Player": [".py", "\n''\n\n\n\n\nimport Hero\n\nimport time\nimport math\n\n\nclass Player:\n def __init__(self,document):\n  self.resources={\n  \"gold\":0,\n  \"food\":0,\n  \"mana\":0\n  }\n  self.buildings={\n  \"farm\":0,\n  \"mine\":0,\n  \"library\":0\n  }\n  self.stats={\n  \"farmps\":1,\n  \"minedps\":1,\n  \"libraryps\":1,\n  \n  }\n  self.hero=Hero.Hero()\n  self.lastupdate=time.time()\n  self.document=document\n  self.redraw_buildings=False\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n def buy(self,ev):\n \n  if ev.target.id ==\"farm_button\":\n   target='farm'\n  if ev.target.id ==\"mine_button\":\n   target='mine'\n  if ev.target.id ==\"library_button\":\n   target='library'\n   \n   \n  if self.get_cost(target)<=self.resources[\"gold\"]:\n   self.resources[\"gold\"]-=self.get_cost(target)\n   self.buildings[target]+=1\n   \n   self.redraw_buildings=True\n   if target ==\"farm\":\n    self.hero.redraw=True\n    \n def get_cost(self,item):\n  cost=10\n  for i in self.buildings:\n  \n   cost *=math.exp(math.log(10)/10)**self.buildings[i]\n   \n   \n  return cost\n  \n  \n def update(self):\n  elapsed_time=time.time()-self.lastupdate\n  self.lastupdate=time.time()\n  \n  for building in self.buildings:\n   self.stats[building+\"ps\"]=math.exp(math.log(10)/10)**self.buildings[building]\n   \n  self.resources[\"food\"]+=self.stats[\"farmps\"]*elapsed_time\n  self.resources[\"gold\"]+=self.stats[\"mineps\"]*elapsed_time\n  self.resources[\"mana\"]+=self.stats[\"libraryps\"]*elapsed_time\n  \n  self.resources[\"food\"]=self.hero.grow_army(self.resources[\"food\"],self.stats[\"farmps\"])\n  \n  \n  \n  \n  \n", ["Hero", "math", "time"]], "Tester": [".py", "\n''\n\n\n\n\n\nimport sys\nsys.path.append(r'C:\\Users\\hvilj\\OneDrive\\Documents\\Python Scripts\\GGGb')\n\nimport Hero\nimport Player\nimport time\n\nplayer=Player.Player(None )\n\n\ndef update():\n global player\n player.update()\n \n \n \n \nfor i in range(20):\n time.sleep(0.1)\n update()\n print(player.hero.army[0])\n", ["Hero", "Player", "sys", "time"]], "UI": [".py", "\n\n\n\n\n\n\n\n\n\n\nfrom browser import console\nfrom browser import document\nfrom browser import html,window\nfrom browser import timer\nimport math\n\n\nimport Hero\nimport Player\nfrom utils import millify\n\ndef click_handler(ev):\n global player\n console.log(ev.target.innerText)\n if ev.target.innerText ==\"Buy Farm\":\n  player.buildings[\"farms\"]+=1\n console.log(player.buildings[\"farms\"])\n \ndef create_button(text,player,Id=None ):\n\n if Id is not None :\n  this_button=html.BUTTON(text,Id=Id)\n else :\n  this_button=html.BUTTON(text)\n def bind_button(button,player):\n  button.bind(\"click\",player.buy)\n  return\n timer.set_timeout(bind_button,100,this_button,player)\n return this_button\n \n \n return\n \ndef create_table(table):\n this_table=html.TABLE()\n for i in table:\n  this_row=html.TR()\n  for j in i:\n   if type(j)==dict:\n    content=j[\"value\"]\n    if \"Tooltip\"in j:\n     Tooltip=html.SPAN(\"Tooltip\",Id=j[\"Id\"]+\" TT\",Class=\"tooltiptext\",Data_html=\"true\")\n     content=html.DIV(content,Class=\"tooltip\",Id=j[\"Id\"]+\" DIV\")\n     content <=Tooltip\n     \n    if \"colspan\"in j:\n     colspan=j[\"colspan\"]\n    else :\n     colspan=1\n    this_row <=html.TD(content,Id=j[\"Id\"],colspan=colspan)\n    \n    if \"width\"in j:\n     this_row.width=j[\"width\"]\n     \n     \n     \n     \n     \n     \n     \n     \n   else :\n    this_row <=html.TD(j)\n  this_table <=this_row\n return this_table\n \n \ndef update_units(player):\n if player.hero.redraw:\n  for i in range(len(player.hero.army)):\n   player.document[f\"Unit {i} Count\"].text=millify(player.hero.army[i]['Count'],0,-1)\n   if \"Tooltip\"in player.hero.army[i]:\n    from browser import html\n    from UI import create_table\n    \n    data_table=[[{\"value\":player.hero.army[i][\"Tooltip\"],\"Id\":\"NA\",\"colspan\":\"2\"}],\n    [\"Attribute\",\"Value\"],\n    [\"Food cost\",f\"{player.hero.army[i]['Food']}\"],\n    [\"Attack\",f\"{player.hero.army[i]['Attack']}\"],\n    [\"Defence\",f\"{player.hero.army[i]['Defence']}\"],\n    [\"HP\",f\"{player.hero.army[i]['HP']}\"],\n    [\"Speed\",f\"{player.hero.army[i]['Speed']}\"],\n    [\"Growth\",f\"{player.hero.army[i]['Growth']}\"]\n    ]\n    tmp=create_table(data_table)\n    Tooltip=html.SPAN(tmp,Id=f\"Unit {i} Name TT\",\n    Class=\"tooltiptext\",Data_html=\"true\")\n    content=player.document[f\"Unit {i} Name DIV\"]\n    content <=Tooltip\n  player.hero.redraw=False\n  \ndef update_resources(player):\n player.document[\"gold\"].text=millify(player.resources[\"gold\"],0,-1)\n \ndef update_buildings(player):\n if player.redraw_buildings:\n  for building in player.buildings:\n   player.document[building+\"cost\"].text=millify(player.get_cost(building),2,1)\n   player.document[building].text=millify(player.buildings[building],0,0)\n   player.document[building+\"yield\"].text=millify(player.stats[building+\"ps\"],2,0)\n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n  player.redraw_buildings=False\n  \n  \n  \ndef update_UI(player):\n update_resources(player)\n update_units(player)\n update_buildings(player)\n \ndef create_UI(player):\n castle_table=create_table([\n [\"Gold:\",{\"value\":\"\",\"Id\":\"gold\"}],\n [\"Building\",\"Count\",\"Yield\",\"Cost\",\"\"],\n [\"Farms\",{\"value\":\"\",\"Id\":\"farm\"},{\"value\":\"\",\"Id\":\"farmyield\"},{\"value\":\"\",\"Id\":\"farmcost\"},create_button(\"Buy\",player,\"farm_button\")],\n [\"Mines\",{\"value\":\"\",\"Id\":\"mine\"},{\"value\":\"\",\"Id\":\"mineyield\"},{\"value\":\"\",\"Id\":\"minecost\"},create_button(\"Buy\",player,\"mine_button\")],\n [\"Libraries\",{\"value\":\"\",\"Id\":\"library\"},{\"value\":\"\",\"Id\":\"libraryyield\"},{\"value\":\"\",\"Id\":\"librarycost\"},create_button(\"Buy\",player,\"library_button\")],\n \n ])\n unit_table=create_table([\n \n [\"Unit\",\"Count\",\"Allocation\"]]+\n [[{\"value\":f\"{player.hero.army[i]['Name']}\",\"Id\":f\"Unit {i} Name\",\"Tooltip\":\"Test\"},\n {\"value\":f\"{player.hero.army[i]['Count']}\",\"Id\":f\"Unit {i} Count\"},\n {\"value\":f\"{player.hero.army[i]['Food allocation']:.2%}\",\"Id\":f\"Unit {i} Food Allocation\"},\n \n \n \n \n ]\n for i in range(len(player.hero.army))\n ]\n \n )\n \n document <=html.TABLE(\n html.TR(\n html.TD(\"\",Id='castle',width=300)+\n html.TD(\"\",Id='units')+\n html.TD(\"TBC\",Id='activity'))+\n html.TR(\n html.TD(\"Might skills\",Id='might_skills')+\n html.TD(\"Magic skills: \",Id='magic_skills')+\n html.TD(\"Magic: \",Id='magic')+\n html.TD(\"Artifacts: \",Id='artifacts')\n )\n )\n \n document[\"castle\"]<=castle_table\n document[\"units\"]<=unit_table\n player.redraw_buildings=True\n", ["Hero", "Player", "UI", "browser", "math", "utils"]], "utils": [".py", "import math\n\nmillnames=['',' Thousand',' Million',' Billion',' Trillion']\n\ndef millify(n:float,decimals=0,type=0):\n ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n millidx=max(0,min(len(millnames)-1,\n int(math.floor(0 if n ==0 else math.log10(abs(n))/3))))\n \n if type ==0:\n  return f'{n / 10**(3 * millidx):.{decimals}f}{millnames[millidx]}'\n if type ==1:\n  return f'{math.ceil(n / 10**(3 * millidx)):.{decimals}f}{millnames[millidx]}'\n if type ==-1:\n  return f'{math.floor(n / 10**(3 * millidx)):.{decimals}f}{millnames[millidx]}'\n", ["math"]]}
__BRYTHON__.update_VFS(scripts)
